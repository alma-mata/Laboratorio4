
Laboratorio4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000200  00000294  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000200  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800112  00800112  000002a6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002a6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000318  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000781  00000000  00000000  00000360  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000675  00000000  00000000  00000ae1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000341  00000000  00000000  00001156  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000094  00000000  00000000  00001498  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003b4  00000000  00000000  0000152c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000078  00000000  00000000  000018e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00001958  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e0       	ldi	r30, 0x00	; 0
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 31       	cpi	r26, 0x12	; 18
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e1       	ldi	r26, 0x12	; 18
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 31       	cpi	r26, 0x14	; 20
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 94 00 	call	0x128	; 0x128 <main>
  9e:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <leer_ADC>:
// Function prototype
void setup();
void comparar_valor();

uint8_t leer_ADC() {
	ADCSRA |= (1 << ADSC);
  a6:	ea e7       	ldi	r30, 0x7A	; 122
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	80 64       	ori	r24, 0x40	; 64
  ae:	80 83       	st	Z, r24
	while (ADCSRA & (1 << ADSC));
  b0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  b4:	86 fd       	sbrc	r24, 6
  b6:	fc cf       	rjmp	.-8      	; 0xb0 <leer_ADC+0xa>
	return ADCH;
  b8:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
  bc:	08 95       	ret

000000be <setup>:

/****************************************/
// NON-Interrupt subroutines
void setup()
{
	cli();
  be:	f8 94       	cli
	// Configuración de puertos
	DDRB = 0xFF;
  c0:	9f ef       	ldi	r25, 0xFF	; 255
  c2:	94 b9       	out	0x04, r25	; 4
	DDRC &= ~((1 << PORTC4) | (1 << PORTC5));
  c4:	87 b1       	in	r24, 0x07	; 7
  c6:	8f 7c       	andi	r24, 0xCF	; 207
  c8:	87 b9       	out	0x07, r24	; 7
	PORTC |= (1 << PORTC4) | (1 << PORTC5);
  ca:	88 b1       	in	r24, 0x08	; 8
  cc:	80 63       	ori	r24, 0x30	; 48
  ce:	88 b9       	out	0x08, r24	; 8
	DDRD = 0xFF;
  d0:	9a b9       	out	0x0a, r25	; 10
	
	// Habilitar interrupciones en el puerto C
	PCMSK1 |= (1 << PCINT12) | (1 << PCINT13);
  d2:	ec e6       	ldi	r30, 0x6C	; 108
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	80 63       	ori	r24, 0x30	; 48
  da:	80 83       	st	Z, r24
	PCICR |= (1 << PCIE1);
  dc:	e8 e6       	ldi	r30, 0x68	; 104
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	82 60       	ori	r24, 0x02	; 2
  e4:	80 83       	st	Z, r24
	
	// Habilitar interrupciones del TIMER0
	TCCR0A = 0x00;  // Modo Normal
  e6:	14 bc       	out	0x24, r1	; 36
	TCCR0B = (1 << CS01) | (1 << CS00);   //Prescaler 64
  e8:	83 e0       	ldi	r24, 0x03	; 3
  ea:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 131;  
  ec:	83 e8       	ldi	r24, 0x83	; 131
  ee:	86 bd       	out	0x26, r24	; 38
	TIMSK0 = (1 << TOIE0);
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	
	// Configuracion ADC
	ADMUX = 0;
  f6:	ec e7       	ldi	r30, 0x7C	; 124
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	10 82       	st	Z, r1
	ADMUX |= (1<<REFS0)|(1<<ADLAR)|(1<<MUX2)|(1<<MUX1)|(1<<MUX0);
  fc:	80 81       	ld	r24, Z
  fe:	87 66       	ori	r24, 0x67	; 103
 100:	80 83       	st	Z, r24
	ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
 102:	87 e8       	ldi	r24, 0x87	; 135
 104:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	sei();
 108:	78 94       	sei
 10a:	08 95       	ret

0000010c <comparar_valor>:
}

void comparar_valor()
{
	if (contador < valor_ADC)
 10c:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <contador>
 110:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 114:	98 17       	cp	r25, r24
 116:	20 f4       	brcc	.+8      	; 0x120 <comparar_valor+0x14>
	{
		PORTB |= pin_ALARMA;
 118:	85 b1       	in	r24, 0x05	; 5
 11a:	88 60       	ori	r24, 0x08	; 8
 11c:	85 b9       	out	0x05, r24	; 5
 11e:	08 95       	ret
	}
	else
	{
		PORTB &= ~pin_ALARMA;
 120:	85 b1       	in	r24, 0x05	; 5
 122:	87 7f       	andi	r24, 0xF7	; 247
 124:	85 b9       	out	0x05, r24	; 5
 126:	08 95       	ret

00000128 <main>:

/****************************************/
// Main Function
int main(void)
{
    setup();
 128:	0e 94 5f 00 	call	0xbe	; 0xbe <setup>
    while (1) 
    {
		// Procesar ADC
		valor_ADC = leer_ADC();
 12c:	0e 94 53 00 	call	0xa6	; 0xa6 <leer_ADC>
 130:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
		PORTB = 0x00;
 134:	15 b8       	out	0x05, r1	; 5
		if (display_actual == 0b0001)
 136:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <display_actual>
 13a:	81 30       	cpi	r24, 0x01	; 1
 13c:	59 f4       	brne	.+22     	; 0x154 <main+0x2c>
		{
			PORTD = Tabla7seg[valor_ADC & 0x0F];
 13e:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <__data_end>
 142:	ef 70       	andi	r30, 0x0F	; 15
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	e0 50       	subi	r30, 0x00	; 0
 148:	ff 4f       	sbci	r31, 0xFF	; 255
 14a:	80 81       	ld	r24, Z
 14c:	8b b9       	out	0x0b, r24	; 11
			PORTB |= DISPLAY1;
 14e:	85 b1       	in	r24, 0x05	; 5
 150:	81 60       	ori	r24, 0x01	; 1
 152:	85 b9       	out	0x05, r24	; 5
		}
		if (display_actual == 0b0010)
 154:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <display_actual>
 158:	82 30       	cpi	r24, 0x02	; 2
 15a:	61 f4       	brne	.+24     	; 0x174 <main+0x4c>
		{
			PORTD = Tabla7seg[(valor_ADC & 0xF0)>>4];
 15c:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <__data_end>
 160:	e2 95       	swap	r30
 162:	ef 70       	andi	r30, 0x0F	; 15
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	e0 50       	subi	r30, 0x00	; 0
 168:	ff 4f       	sbci	r31, 0xFF	; 255
 16a:	80 81       	ld	r24, Z
 16c:	8b b9       	out	0x0b, r24	; 11
			PORTB |= DISPLAY2;
 16e:	85 b1       	in	r24, 0x05	; 5
 170:	82 60       	ori	r24, 0x02	; 2
 172:	85 b9       	out	0x05, r24	; 5
		}
		if (display_actual == 0b0100)
 174:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <display_actual>
 178:	84 30       	cpi	r24, 0x04	; 4
 17a:	31 f4       	brne	.+12     	; 0x188 <main+0x60>
		{
			PORTD = contador;
 17c:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <contador>
 180:	8b b9       	out	0x0b, r24	; 11
			PORTB |= DISPLAY3;
 182:	85 b1       	in	r24, 0x05	; 5
 184:	84 60       	ori	r24, 0x04	; 4
 186:	85 b9       	out	0x05, r24	; 5
		}
		comparar_valor();
 188:	0e 94 86 00 	call	0x10c	; 0x10c <comparar_valor>
    }
 18c:	cf cf       	rjmp	.-98     	; 0x12c <main+0x4>

0000018e <__vector_4>:
}

/****************************************/
// Interrupt subroutines
ISR(PCINT1_vect)
{
 18e:	1f 92       	push	r1
 190:	0f 92       	push	r0
 192:	0f b6       	in	r0, 0x3f	; 63
 194:	0f 92       	push	r0
 196:	11 24       	eor	r1, r1
 198:	8f 93       	push	r24
	if(!(PINC & 0b00010000)) //Si es PC4 aumenta contador
 19a:	34 99       	sbic	0x06, 4	; 6
 19c:	05 c0       	rjmp	.+10     	; 0x1a8 <__vector_4+0x1a>
	{
		contador++;
 19e:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <contador>
 1a2:	8f 5f       	subi	r24, 0xFF	; 255
 1a4:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <contador>
	}
	if(!(PINC & 0b00100000)) // Si es PC5 disminuye contador
 1a8:	35 99       	sbic	0x06, 5	; 6
 1aa:	05 c0       	rjmp	.+10     	; 0x1b6 <__vector_4+0x28>
	{ 
		contador--;
 1ac:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <contador>
 1b0:	81 50       	subi	r24, 0x01	; 1
 1b2:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <contador>
	}
}
 1b6:	8f 91       	pop	r24
 1b8:	0f 90       	pop	r0
 1ba:	0f be       	out	0x3f, r0	; 63
 1bc:	0f 90       	pop	r0
 1be:	1f 90       	pop	r1
 1c0:	18 95       	reti

000001c2 <__vector_16>:
ISR(TIMER0_OVF_vect)
{	
 1c2:	1f 92       	push	r1
 1c4:	0f 92       	push	r0
 1c6:	0f b6       	in	r0, 0x3f	; 63
 1c8:	0f 92       	push	r0
 1ca:	11 24       	eor	r1, r1
 1cc:	8f 93       	push	r24
	if (display_actual == 0b0001)
 1ce:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <display_actual>
 1d2:	81 30       	cpi	r24, 0x01	; 1
 1d4:	21 f4       	brne	.+8      	; 0x1de <__vector_16+0x1c>
	{
		display_actual = 0b0010;
 1d6:	82 e0       	ldi	r24, 0x02	; 2
 1d8:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <display_actual>
 1dc:	09 c0       	rjmp	.+18     	; 0x1f0 <__vector_16+0x2e>
	}
	else{ if (display_actual == 0b0010)
 1de:	82 30       	cpi	r24, 0x02	; 2
 1e0:	21 f4       	brne	.+8      	; 0x1ea <__vector_16+0x28>
		{
			display_actual = 0b0100;
 1e2:	84 e0       	ldi	r24, 0x04	; 4
 1e4:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <display_actual>
 1e8:	03 c0       	rjmp	.+6      	; 0x1f0 <__vector_16+0x2e>
		}
		else { 
				display_actual = 0b0001;
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <display_actual>
		}
	}
 1f0:	8f 91       	pop	r24
 1f2:	0f 90       	pop	r0
 1f4:	0f be       	out	0x3f, r0	; 63
 1f6:	0f 90       	pop	r0
 1f8:	1f 90       	pop	r1
 1fa:	18 95       	reti

000001fc <_exit>:
 1fc:	f8 94       	cli

000001fe <__stop_program>:
 1fe:	ff cf       	rjmp	.-2      	; 0x1fe <__stop_program>
