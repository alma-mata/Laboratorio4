
Laboratorio4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000001f0  00000284  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800110  00800110  00000294  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000304  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000781  00000000  00000000  0000034c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000675  00000000  00000000  00000acd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000311  00000000  00000000  00001142  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000098  00000000  00000000  00001454  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003b0  00000000  00000000  000014ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000085  00000000  00000000  0000189c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00001921  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ef       	ldi	r30, 0xF0	; 240
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e1       	ldi	r26, 0x10	; 16
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 31       	cpi	r26, 0x13	; 19
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 a0 00 	call	0x140	; 0x140 <main>
  9e:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <leer_ADC>:
// Function prototype
void setup();
void update_OUT();

uint8_t leer_ADC() {
	ADCSRA |= (1 << ADSC);
  a6:	ea e7       	ldi	r30, 0x7A	; 122
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	80 64       	ori	r24, 0x40	; 64
  ae:	80 83       	st	Z, r24
	while (ADCSRA & (1 << ADSC));
  b0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  b4:	86 fd       	sbrc	r24, 6
  b6:	fc cf       	rjmp	.-8      	; 0xb0 <leer_ADC+0xa>
	return ADCH;
  b8:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
  bc:	08 95       	ret

000000be <setup>:

/****************************************/
// NON-Interrupt subroutines
void setup()
{
	cli();
  be:	f8 94       	cli
	// Configuración de puertos
	DDRB = 0xFF;
  c0:	9f ef       	ldi	r25, 0xFF	; 255
  c2:	94 b9       	out	0x04, r25	; 4
	DDRC |= MASK_OUTC;
  c4:	87 b1       	in	r24, 0x07	; 7
  c6:	8f 60       	ori	r24, 0x0F	; 15
  c8:	87 b9       	out	0x07, r24	; 7
	DDRC &= ~((1 << PORTC4) | (1 << PORTC5));
  ca:	87 b1       	in	r24, 0x07	; 7
  cc:	8f 7c       	andi	r24, 0xCF	; 207
  ce:	87 b9       	out	0x07, r24	; 7
	PORTC |= (1 << PORTC4) | (1 << PORTC5);
  d0:	88 b1       	in	r24, 0x08	; 8
  d2:	80 63       	ori	r24, 0x30	; 48
  d4:	88 b9       	out	0x08, r24	; 8
	DDRD = 0xFF;
  d6:	9a b9       	out	0x0a, r25	; 10
	
	// Habilitar interrupciones en el puerto C
	PCMSK1 |= (1 << PCINT12) | (1 << PCINT13);
  d8:	ec e6       	ldi	r30, 0x6C	; 108
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 81       	ld	r24, Z
  de:	80 63       	ori	r24, 0x30	; 48
  e0:	80 83       	st	Z, r24
	PCICR |= (1 << PCIE1);
  e2:	e8 e6       	ldi	r30, 0x68	; 104
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	80 81       	ld	r24, Z
  e8:	82 60       	ori	r24, 0x02	; 2
  ea:	80 83       	st	Z, r24
	
	// Habilitar interrupciones del TIMER0
	TCCR0A = 0x00;  // Modo Normal
  ec:	14 bc       	out	0x24, r1	; 36
	TCCR0B = (1 << CS01) | (1 << CS00);   //Prescaler 64
  ee:	83 e0       	ldi	r24, 0x03	; 3
  f0:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 131;  
  f2:	83 e8       	ldi	r24, 0x83	; 131
  f4:	86 bd       	out	0x26, r24	; 38
	TIMSK0 = (1 << TOIE0);
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	
	// Configuracion ADC
	ADMUX = 0;
  fc:	ec e7       	ldi	r30, 0x7C	; 124
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	10 82       	st	Z, r1
	ADMUX |= (1<<REFS0)|(1<<ADLAR)|(1<<MUX2)|(1<<MUX1)|(1<<MUX0);
 102:	80 81       	ld	r24, Z
 104:	87 66       	ori	r24, 0x67	; 103
 106:	80 83       	st	Z, r24
	ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
 108:	87 e8       	ldi	r24, 0x87	; 135
 10a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	sei();
 10e:	78 94       	sei
 110:	08 95       	ret

00000112 <update_OUT>:
}

void update_OUT()
{
	// Salida del contador en PORTB y PORTC
	PORTB = (PORTB & ~MASK_OUTB) | ((contador & 0x0F) << 2);
 112:	25 b1       	in	r18, 0x05	; 5
 114:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <contador>
 118:	9f 70       	andi	r25, 0x0F	; 15
 11a:	89 2f       	mov	r24, r25
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	88 0f       	add	r24, r24
 120:	99 1f       	adc	r25, r25
 122:	88 0f       	add	r24, r24
 124:	99 1f       	adc	r25, r25
 126:	92 2f       	mov	r25, r18
 128:	93 7c       	andi	r25, 0xC3	; 195
 12a:	89 2b       	or	r24, r25
 12c:	85 b9       	out	0x05, r24	; 5
	PORTC = (PORTC & ~MASK_OUTC) | ((contador >> 4) & 0x0F);
 12e:	98 b1       	in	r25, 0x08	; 8
 130:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <contador>
 134:	90 7f       	andi	r25, 0xF0	; 240
 136:	82 95       	swap	r24
 138:	8f 70       	andi	r24, 0x0F	; 15
 13a:	89 2b       	or	r24, r25
 13c:	88 b9       	out	0x08, r24	; 8
 13e:	08 95       	ret

00000140 <main>:

/****************************************/
// Main Function
int main(void)
{
    setup();
 140:	0e 94 5f 00 	call	0xbe	; 0xbe <setup>
    while (1) 
    {
		update_OUT();
 144:	0e 94 89 00 	call	0x112	; 0x112 <update_OUT>
		
		// Procesar ADC
		valor_ADC = leer_ADC();
 148:	0e 94 53 00 	call	0xa6	; 0xa6 <leer_ADC>
 14c:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
		if (display_actual == 0)
 150:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <display_actual>
 154:	81 11       	cpse	r24, r1
 156:	0d c0       	rjmp	.+26     	; 0x172 <main+0x32>
		{
			PORTB = 0x00;
 158:	15 b8       	out	0x05, r1	; 5
			PORTD = Tabla7seg[valor_ADC & 0x0F];
 15a:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <__data_end>
 15e:	ef 70       	andi	r30, 0x0F	; 15
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	e0 50       	subi	r30, 0x00	; 0
 164:	ff 4f       	sbci	r31, 0xFF	; 255
 166:	80 81       	ld	r24, Z
 168:	8b b9       	out	0x0b, r24	; 11
			PORTB |= DISPLAY1;
 16a:	85 b1       	in	r24, 0x05	; 5
 16c:	81 60       	ori	r24, 0x01	; 1
 16e:	85 b9       	out	0x05, r24	; 5
 170:	e9 cf       	rjmp	.-46     	; 0x144 <main+0x4>
		}
		else{
			PORTB = 0x00;
 172:	15 b8       	out	0x05, r1	; 5
			PORTD = Tabla7seg[(valor_ADC & 0xF0)>>4];
 174:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <__data_end>
 178:	e2 95       	swap	r30
 17a:	ef 70       	andi	r30, 0x0F	; 15
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	e0 50       	subi	r30, 0x00	; 0
 180:	ff 4f       	sbci	r31, 0xFF	; 255
 182:	80 81       	ld	r24, Z
 184:	8b b9       	out	0x0b, r24	; 11
			PORTB |= DISPLAY2;
 186:	85 b1       	in	r24, 0x05	; 5
 188:	82 60       	ori	r24, 0x02	; 2
 18a:	85 b9       	out	0x05, r24	; 5
 18c:	db cf       	rjmp	.-74     	; 0x144 <main+0x4>

0000018e <__vector_4>:
}

/****************************************/
// Interrupt subroutines
ISR(PCINT1_vect)
{
 18e:	1f 92       	push	r1
 190:	0f 92       	push	r0
 192:	0f b6       	in	r0, 0x3f	; 63
 194:	0f 92       	push	r0
 196:	11 24       	eor	r1, r1
 198:	8f 93       	push	r24
	if(!(PINC & 0b00010000)) //Si es PC4 aumenta contador
 19a:	34 99       	sbic	0x06, 4	; 6
 19c:	05 c0       	rjmp	.+10     	; 0x1a8 <__vector_4+0x1a>
	{
		contador++;
 19e:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <contador>
 1a2:	8f 5f       	subi	r24, 0xFF	; 255
 1a4:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <contador>
	}
	if(!(PINC & 0b00100000)) // Si es PC5 disminuye contador
 1a8:	35 99       	sbic	0x06, 5	; 6
 1aa:	05 c0       	rjmp	.+10     	; 0x1b6 <__vector_4+0x28>
	{ 
		contador--;
 1ac:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <contador>
 1b0:	81 50       	subi	r24, 0x01	; 1
 1b2:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <contador>
	}
}
 1b6:	8f 91       	pop	r24
 1b8:	0f 90       	pop	r0
 1ba:	0f be       	out	0x3f, r0	; 63
 1bc:	0f 90       	pop	r0
 1be:	1f 90       	pop	r1
 1c0:	18 95       	reti

000001c2 <__vector_16>:
ISR(TIMER0_OVF_vect)
{	
 1c2:	1f 92       	push	r1
 1c4:	0f 92       	push	r0
 1c6:	0f b6       	in	r0, 0x3f	; 63
 1c8:	0f 92       	push	r0
 1ca:	11 24       	eor	r1, r1
 1cc:	8f 93       	push	r24
 1ce:	9f 93       	push	r25
	display_actual = !display_actual;
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <display_actual>
 1d6:	91 11       	cpse	r25, r1
 1d8:	80 e0       	ldi	r24, 0x00	; 0
 1da:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <display_actual>
 1de:	9f 91       	pop	r25
 1e0:	8f 91       	pop	r24
 1e2:	0f 90       	pop	r0
 1e4:	0f be       	out	0x3f, r0	; 63
 1e6:	0f 90       	pop	r0
 1e8:	1f 90       	pop	r1
 1ea:	18 95       	reti

000001ec <_exit>:
 1ec:	f8 94       	cli

000001ee <__stop_program>:
 1ee:	ff cf       	rjmp	.-2      	; 0x1ee <__stop_program>
