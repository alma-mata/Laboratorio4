
Laboratorio4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000132  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000001a6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001a6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006ea  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000064b  00000000  00000000  0000093a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000269  00000000  00000000  00000f85  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000064  00000000  00000000  000011f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000365  00000000  00000000  00001254  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000003c  00000000  00000000  000015b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  000015f5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__vector_4>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 78 00 	call	0xf0	; 0xf0 <main>
  88:	0c 94 97 00 	jmp	0x12e	; 0x12e <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <setup>:

/****************************************/
// NON-Interrupt subroutines
void setup()
{
	cli();
  90:	f8 94       	cli
	// Configuración de puertos
	DDRB |= MASK_OUTB;
  92:	84 b1       	in	r24, 0x04	; 4
  94:	8c 63       	ori	r24, 0x3C	; 60
  96:	84 b9       	out	0x04, r24	; 4
	DDRC |= MASK_OUTC;
  98:	87 b1       	in	r24, 0x07	; 7
  9a:	8f 60       	ori	r24, 0x0F	; 15
  9c:	87 b9       	out	0x07, r24	; 7
	DDRC &= ~((1 << PORTC4) | (1 << PORTC5));
  9e:	87 b1       	in	r24, 0x07	; 7
  a0:	8f 7c       	andi	r24, 0xCF	; 207
  a2:	87 b9       	out	0x07, r24	; 7
	PORTC |= (1 << PORTC4) | (1 << PORTC5);
  a4:	88 b1       	in	r24, 0x08	; 8
  a6:	80 63       	ori	r24, 0x30	; 48
  a8:	88 b9       	out	0x08, r24	; 8
	
	// Habilitar interrupciones en el puerto C
	PCMSK1 |= (1 << PCINT12) | (1 << PCINT13);
  aa:	ec e6       	ldi	r30, 0x6C	; 108
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	80 63       	ori	r24, 0x30	; 48
  b2:	80 83       	st	Z, r24
	PCICR |= (1 << PCIE1);
  b4:	e8 e6       	ldi	r30, 0x68	; 104
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	80 81       	ld	r24, Z
  ba:	82 60       	ori	r24, 0x02	; 2
  bc:	80 83       	st	Z, r24
	sei();
  be:	78 94       	sei
  c0:	08 95       	ret

000000c2 <update_OUT>:
}

void update_OUT()
{
	// Salida del contador en PORTB y PORTC
	PORTB = (PORTB & ~MASK_OUTB) | ((contador & 0x0F) << 2);
  c2:	25 b1       	in	r18, 0x05	; 5
  c4:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  c8:	9f 70       	andi	r25, 0x0F	; 15
  ca:	89 2f       	mov	r24, r25
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	88 0f       	add	r24, r24
  d0:	99 1f       	adc	r25, r25
  d2:	88 0f       	add	r24, r24
  d4:	99 1f       	adc	r25, r25
  d6:	92 2f       	mov	r25, r18
  d8:	93 7c       	andi	r25, 0xC3	; 195
  da:	89 2b       	or	r24, r25
  dc:	85 b9       	out	0x05, r24	; 5
	PORTC = (PORTC & ~MASK_OUTC) | ((contador >> 4) & 0x0F);
  de:	98 b1       	in	r25, 0x08	; 8
  e0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  e4:	90 7f       	andi	r25, 0xF0	; 240
  e6:	82 95       	swap	r24
  e8:	8f 70       	andi	r24, 0x0F	; 15
  ea:	89 2b       	or	r24, r25
  ec:	88 b9       	out	0x08, r24	; 8
  ee:	08 95       	ret

000000f0 <main>:

/****************************************/
// Main Function
int main(void)
{
    setup();
  f0:	0e 94 48 00 	call	0x90	; 0x90 <setup>
    while (1) 
    {
		update_OUT();
  f4:	0e 94 61 00 	call	0xc2	; 0xc2 <update_OUT>
  f8:	fd cf       	rjmp	.-6      	; 0xf4 <main+0x4>

000000fa <__vector_4>:
	PORTC = (PORTC & ~MASK_OUTC) | ((contador >> 4) & 0x0F);
}
/****************************************/
// Interrupt subroutines
ISR(PCINT1_vect)
{
  fa:	1f 92       	push	r1
  fc:	0f 92       	push	r0
  fe:	0f b6       	in	r0, 0x3f	; 63
 100:	0f 92       	push	r0
 102:	11 24       	eor	r1, r1
 104:	8f 93       	push	r24
	if(!(PINC & 0b00010000)) //Si es PB1 se resta al contador
 106:	34 99       	sbic	0x06, 4	; 6
 108:	05 c0       	rjmp	.+10     	; 0x114 <__vector_4+0x1a>
	{
		contador++;
 10a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 10e:	8f 5f       	subi	r24, 0xFF	; 255
 110:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}//Fin Resta
	if(!(PINC & 0b00100000)){ // Si es PB0 se añade al contador
 114:	35 99       	sbic	0x06, 5	; 6
 116:	05 c0       	rjmp	.+10     	; 0x122 <__vector_4+0x28>
		contador--;
 118:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 11c:	81 50       	subi	r24, 0x01	; 1
 11e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
 122:	8f 91       	pop	r24
 124:	0f 90       	pop	r0
 126:	0f be       	out	0x3f, r0	; 63
 128:	0f 90       	pop	r0
 12a:	1f 90       	pop	r1
 12c:	18 95       	reti

0000012e <_exit>:
 12e:	f8 94       	cli

00000130 <__stop_program>:
 130:	ff cf       	rjmp	.-2      	; 0x130 <__stop_program>
