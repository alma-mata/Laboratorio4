
Laboratorio4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000242  000002d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000242  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800112  00800112  000002e8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002e8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000318  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000358  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000079e  00000000  00000000  000003a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000675  00000000  00000000  00000b3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000033b  00000000  00000000  000011b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000094  00000000  00000000  000014f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003d0  00000000  00000000  00001584  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000078  00000000  00000000  00001954  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  000019cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 e8 00 	jmp	0x1d0	; 0x1d0 <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 02 01 	jmp	0x204	; 0x204 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e4       	ldi	r30, 0x42	; 66
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 31       	cpi	r26, 0x12	; 18
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e1       	ldi	r26, 0x12	; 18
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 31       	cpi	r26, 0x16	; 22
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 92 00 	call	0x124	; 0x124 <main>
  9e:	0c 94 1f 01 	jmp	0x23e	; 0x23e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <leer_ADC>:
// Function prototype
void setup();
void comparar_valor();

uint8_t leer_ADC() {
	ADCSRA |= (1 << ADSC);
  a6:	ea e7       	ldi	r30, 0x7A	; 122
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	80 64       	ori	r24, 0x40	; 64
  ae:	80 83       	st	Z, r24
	while (ADCSRA & (1 << ADSC));
  b0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  b4:	86 fd       	sbrc	r24, 6
  b6:	fc cf       	rjmp	.-8      	; 0xb0 <leer_ADC+0xa>
	return ADCH;
  b8:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
  bc:	08 95       	ret

000000be <setup>:

/****************************************/
// NON-Interrupt subroutines
void setup()
{
	cli();
  be:	f8 94       	cli
	//SPCR = 0x00; // Asegura que el SPI esté desactivado
	// Configuración de puertos
	DDRB = 0xFF;
  c0:	9f ef       	ldi	r25, 0xFF	; 255
  c2:	94 b9       	out	0x04, r25	; 4
	DDRC &= ~((1 << PORTC4) | (1 << PORTC5));
  c4:	87 b1       	in	r24, 0x07	; 7
  c6:	8f 7c       	andi	r24, 0xCF	; 207
  c8:	87 b9       	out	0x07, r24	; 7
	PORTC |= (1 << PORTC4) | (1 << PORTC5);
  ca:	88 b1       	in	r24, 0x08	; 8
  cc:	80 63       	ori	r24, 0x30	; 48
  ce:	88 b9       	out	0x08, r24	; 8
	DDRD = 0xFF;
  d0:	9a b9       	out	0x0a, r25	; 10
	
	// Habilitar interrupciones en el puerto C
	PCMSK1 |= (1 << PCINT12) | (1 << PCINT13);
  d2:	ec e6       	ldi	r30, 0x6C	; 108
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	80 63       	ori	r24, 0x30	; 48
  da:	80 83       	st	Z, r24
	PCICR |= (1 << PCIE1);
  dc:	e8 e6       	ldi	r30, 0x68	; 104
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	82 60       	ori	r24, 0x02	; 2
  e4:	80 83       	st	Z, r24
	
	// Habilitar interrupciones del TIMER0
	TCCR0A = 0x00;  // Modo Normal
  e6:	14 bc       	out	0x24, r1	; 36
	TCCR0B = (1 << CS01) | (1 << CS00);   //Prescaler 64
  e8:	83 e0       	ldi	r24, 0x03	; 3
  ea:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 131;
  ec:	83 e8       	ldi	r24, 0x83	; 131
  ee:	86 bd       	out	0x26, r24	; 38
	TIMSK0 = (1 << TOIE0);
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	
	// Configuracion ADC
	ADMUX = (1 << REFS0) | (1 << ADLAR) | 7; // ADC7 (A7)
  f6:	87 e6       	ldi	r24, 0x67	; 103
  f8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
  fc:	87 e8       	ldi	r24, 0x87	; 135
  fe:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	sei();
 102:	78 94       	sei
 104:	08 95       	ret

00000106 <comparar_valor>:
}

void comparar_valor()
{
	// Solo encender la alarma si el valor filtrado supera el contador con margen
	if (contador < (valor_ADC_filtrado & 0xFF)) // cast a 8 bits por seguridad
 106:	20 91 15 01 	lds	r18, 0x0115	; 0x800115 <contador>
 10a:	30 e0       	ldi	r19, 0x00	; 0
 10c:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 110:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x1>
 114:	99 27       	eor	r25, r25
 116:	28 17       	cp	r18, r24
 118:	39 07       	cpc	r19, r25
 11a:	18 f4       	brcc	.+6      	; 0x122 <comparar_valor+0x1c>
	{
		PORTB |= pin_ALARMA;
 11c:	85 b1       	in	r24, 0x05	; 5
 11e:	88 60       	ori	r24, 0x08	; 8
 120:	85 b9       	out	0x05, r24	; 5
 122:	08 95       	ret

00000124 <main>:

/****************************************/
// Main Function
int main(void)
{
	setup();
 124:	0e 94 5f 00 	call	0xbe	; 0xbe <setup>
	while (1)
	{
		// Procesar ADC
		valor_ADC = leer_ADC();
 128:	0e 94 53 00 	call	0xa6	; 0xa6 <leer_ADC>
 12c:	28 2f       	mov	r18, r24
 12e:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <valor_ADC>
		
		// Aplicar filtro de media móvil exponencial
		valor_ADC_filtrado = (valor_ADC_filtrado * 7 + valor_ADC) / 8;
 132:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <__data_end>
 136:	50 91 13 01 	lds	r21, 0x0113	; 0x800113 <__data_end+0x1>
 13a:	ca 01       	movw	r24, r20
 13c:	88 0f       	add	r24, r24
 13e:	99 1f       	adc	r25, r25
 140:	88 0f       	add	r24, r24
 142:	99 1f       	adc	r25, r25
 144:	88 0f       	add	r24, r24
 146:	99 1f       	adc	r25, r25
 148:	84 1b       	sub	r24, r20
 14a:	95 0b       	sbc	r25, r21
 14c:	82 0f       	add	r24, r18
 14e:	91 1d       	adc	r25, r1
 150:	96 95       	lsr	r25
 152:	87 95       	ror	r24
 154:	96 95       	lsr	r25
 156:	87 95       	ror	r24
 158:	96 95       	lsr	r25
 15a:	87 95       	ror	r24
 15c:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <__data_end+0x1>
 160:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>

		PORTB = 0x00;
 164:	15 b8       	out	0x05, r1	; 5
		if (display_actual == 0b0001)
 166:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <display_actual>
 16a:	81 30       	cpi	r24, 0x01	; 1
 16c:	69 f4       	brne	.+26     	; 0x188 <main+0x64>
		{
			PORTD = Tabla7seg[valor_ADC_filtrado & 0x0F];
 16e:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <__data_end>
 172:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <__data_end+0x1>
 176:	ef 70       	andi	r30, 0x0F	; 15
 178:	ff 27       	eor	r31, r31
 17a:	e0 50       	subi	r30, 0x00	; 0
 17c:	ff 4f       	sbci	r31, 0xFF	; 255
 17e:	80 81       	ld	r24, Z
 180:	8b b9       	out	0x0b, r24	; 11
			PORTB |= DISPLAY1;
 182:	85 b1       	in	r24, 0x05	; 5
 184:	81 60       	ori	r24, 0x01	; 1
 186:	85 b9       	out	0x05, r24	; 5
		}
		if (display_actual == 0b0010)
 188:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <display_actual>
 18c:	82 30       	cpi	r24, 0x02	; 2
 18e:	99 f4       	brne	.+38     	; 0x1b6 <main+0x92>
		{
			PORTD = Tabla7seg[(valor_ADC_filtrado & 0xF0)>>4];
 190:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <__data_end>
 194:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <__data_end+0x1>
 198:	e0 7f       	andi	r30, 0xF0	; 240
 19a:	ff 27       	eor	r31, r31
 19c:	f2 95       	swap	r31
 19e:	e2 95       	swap	r30
 1a0:	ef 70       	andi	r30, 0x0F	; 15
 1a2:	ef 27       	eor	r30, r31
 1a4:	ff 70       	andi	r31, 0x0F	; 15
 1a6:	ef 27       	eor	r30, r31
 1a8:	e0 50       	subi	r30, 0x00	; 0
 1aa:	ff 4f       	sbci	r31, 0xFF	; 255
 1ac:	80 81       	ld	r24, Z
 1ae:	8b b9       	out	0x0b, r24	; 11
			PORTB |= DISPLAY2;
 1b0:	85 b1       	in	r24, 0x05	; 5
 1b2:	82 60       	ori	r24, 0x02	; 2
 1b4:	85 b9       	out	0x05, r24	; 5
		}
		if (display_actual == 0b0100)
 1b6:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <display_actual>
 1ba:	84 30       	cpi	r24, 0x04	; 4
 1bc:	31 f4       	brne	.+12     	; 0x1ca <main+0xa6>
		{
			PORTD = contador;
 1be:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <contador>
 1c2:	8b b9       	out	0x0b, r24	; 11
			PORTB |= DISPLAY3;
 1c4:	85 b1       	in	r24, 0x05	; 5
 1c6:	84 60       	ori	r24, 0x04	; 4
 1c8:	85 b9       	out	0x05, r24	; 5
		}
		comparar_valor();
 1ca:	0e 94 83 00 	call	0x106	; 0x106 <comparar_valor>
	}
 1ce:	ac cf       	rjmp	.-168    	; 0x128 <main+0x4>

000001d0 <__vector_4>:
}

/****************************************/
// Interrupt subroutines
ISR(PCINT1_vect)
{
 1d0:	1f 92       	push	r1
 1d2:	0f 92       	push	r0
 1d4:	0f b6       	in	r0, 0x3f	; 63
 1d6:	0f 92       	push	r0
 1d8:	11 24       	eor	r1, r1
 1da:	8f 93       	push	r24
	if(!(PINC & 0b00010000)) //Si es PC4 aumenta contador
 1dc:	34 99       	sbic	0x06, 4	; 6
 1de:	05 c0       	rjmp	.+10     	; 0x1ea <__vector_4+0x1a>
	{
		contador++;
 1e0:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <contador>
 1e4:	8f 5f       	subi	r24, 0xFF	; 255
 1e6:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <contador>
	}
	if(!(PINC & 0b00100000)) // Si es PC5 disminuye contador
 1ea:	35 99       	sbic	0x06, 5	; 6
 1ec:	05 c0       	rjmp	.+10     	; 0x1f8 <__vector_4+0x28>
	{
		contador--;
 1ee:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <contador>
 1f2:	81 50       	subi	r24, 0x01	; 1
 1f4:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <contador>
	}
}
 1f8:	8f 91       	pop	r24
 1fa:	0f 90       	pop	r0
 1fc:	0f be       	out	0x3f, r0	; 63
 1fe:	0f 90       	pop	r0
 200:	1f 90       	pop	r1
 202:	18 95       	reti

00000204 <__vector_16>:
ISR(TIMER0_OVF_vect)
{
 204:	1f 92       	push	r1
 206:	0f 92       	push	r0
 208:	0f b6       	in	r0, 0x3f	; 63
 20a:	0f 92       	push	r0
 20c:	11 24       	eor	r1, r1
 20e:	8f 93       	push	r24
	if (display_actual == 0b0001)
 210:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <display_actual>
 214:	81 30       	cpi	r24, 0x01	; 1
 216:	21 f4       	brne	.+8      	; 0x220 <__vector_16+0x1c>
	{
		display_actual = 0b0010;
 218:	82 e0       	ldi	r24, 0x02	; 2
 21a:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <display_actual>
 21e:	09 c0       	rjmp	.+18     	; 0x232 <__vector_16+0x2e>
	}
	else{ if (display_actual == 0b0010)
 220:	82 30       	cpi	r24, 0x02	; 2
 222:	21 f4       	brne	.+8      	; 0x22c <__vector_16+0x28>
		{
			display_actual = 0b0100;
 224:	84 e0       	ldi	r24, 0x04	; 4
 226:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <display_actual>
 22a:	03 c0       	rjmp	.+6      	; 0x232 <__vector_16+0x2e>
		}
		else {
			display_actual = 0b0001;
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <display_actual>
		}
	}
 232:	8f 91       	pop	r24
 234:	0f 90       	pop	r0
 236:	0f be       	out	0x3f, r0	; 63
 238:	0f 90       	pop	r0
 23a:	1f 90       	pop	r1
 23c:	18 95       	reti

0000023e <_exit>:
 23e:	f8 94       	cli

00000240 <__stop_program>:
 240:	ff cf       	rjmp	.-2      	; 0x240 <__stop_program>
